// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true -Pno_verify=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"





#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
extern crate prusti_contracts;
use prusti_contracts::*;
struct Foo<'a, T: PartialEq, const L : usize>(&'a [T; L]);
impl <'a, T: PartialEq, const L : usize> Foo<'a, T, L> {
    pub fn bar(self) -> &'a [T; L] { self.0 }
}
#[allow(non_camel_case_types)]
struct PrustiStructFoo_$(NUM_UUID)<'a, T: PartialEq,
                                                        const L :
                                                        usize>(&'a ::core::marker::PhantomData<()>,
                                                               ::core::marker::PhantomData<T>);
impl <'a, T: PartialEq, const L : usize>
 PrustiStructFoo_$(NUM_UUID)<'a, T, L> {
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_bar_$(NUM_UUID)(_self:
                                                                 Foo<'a, T,
                                                                     L>,
                                                             result:
                                                                 &'a [T; L]) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { result == _self.0 };
    }
    #[prusti::pure]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::trusted]
    #[prusti::extern_spec]
    pub fn bar(_self: Foo<'a, T, L>) -> &'a [T; L] {
        Foo::<'a, T, L>::bar(_self);
        ::core::panicking::panic("not implemented")
    }
}
fn main() {}
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:32 ~ trait_bounds[$(CRATE_ID)]::{impl#1}::prusti_post_item_bar_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: true, trusted: true })
