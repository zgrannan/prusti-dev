window.SIDEBAR_ITEMS = {"enum":[["AssignKind",""],["BinaryOpKind",""],["BitVector",""],["BitVectorSize",""],["CastKind",""],["Const",""],["ContainerOpKind",""],["Expr",""],["Float",""],["FloatConst",""],["PermAmount","The permission amount."],["PermAmountError",""],["PlaceComponent","A component that can be used to represent a place as a vector."],["Predicate",""],["Stmt",""],["Type",""],["TypeId",""],["UnaryOpKind",""]],"fn":[["compute_identifier",""],["default_fallible_fold_expr",""],["default_fallible_walk_expr",""],["default_fold_expr",""],["default_walk_expr",""],["stmts_to_str",""]],"mod":[["common",""]],"struct":[["AddrOf",""],["ApplyMagicWand",""],["Assert",""],["Assign",""],["BeginFrame",""],["BinOp",""],["BitVectorConst",""],["BodylessMethod",""],["Cast",""],["Comment","Individual structs for different cases of Expr"],["Cond",""],["ConstExpr",""],["ContainerOp",""],["Domain",""],["DomainAxiom",""],["DomainFunc",""],["DomainFuncApp",""],["DomainType",""],["Downcast",""],["DowncastExpr",""],["EndFrame",""],["EnumPredicate","The predicate for types that have 0 or more than one variants."],["EnumVariantIndex",""],["Exhale",""],["Exists",""],["ExpireBorrows",""],["Field",""],["FieldAccessPredicate",""],["FieldExpr",""],["Fold",""],["ForAll",""],["FuncApp",""],["Function",""],["FunctionIdentifier",""],["If",""],["Inhale",""],["InhaleExhale",""],["Label",""],["LabelledOld",""],["LetExpr",""],["Local","Individual structs for different cases of Expr"],["LocalVar",""],["MagicWand",""],["Map","Corresponding to `ExplicitMap`, the elements are expressions of Maplets, i.e. key-value pairs"],["MapType",""],["MethodCall",""],["Obtain",""],["PackageMagicWand",""],["Position","The identifier of a statement. Used in error reporting. TODO: This should probably have custom `PartialEq, Eq, Hash, PartialOrd, Ord` impls, to ensure that it is not included in these calculations."],["PredicateAccessPredicate",""],["Seq",""],["SeqType",""],["SnapApp",""],["SnapshotType",""],["StructPredicate","The predicate for types that have exactly one variant."],["TransferPerm",""],["Trigger",""],["TypeVar",""],["TypedRef",""],["UnaryOp",""],["Unfold",""],["Unfolding",""],["Variant",""]],"trait":[["ExprFolder",""],["ExprIterator",""],["ExprWalker",""],["FallibleExprFolder",""],["FallibleExprWalker",""],["FallibleStmtFolder",""],["FallibleStmtWalker",""],["StmtFolder",""],["StmtWalker",""]],"type":[["MaybeEnumVariantIndex",""]]};